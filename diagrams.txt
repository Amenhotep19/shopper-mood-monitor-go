graph TD
A[C++ code] -->B[OpenCV]
B --> C[DNN module]
C-->V[OpenVINO backend]
C -->O[OpenCV backend]
V-->D[CPU]
V-->E[GPU 32-bit]
V-->F[GPU 16-bit]
V-->G[VPU]

graph TD
A[C++] -->B[OpenCV]
B --> C[DNN module]
C-->Caffe
C -->TensorFlow
C -->Torch
C -->Darknet
C-->V(OpenVINO IR)

graph TD
subgraph cloud
S[MQTT Server]
end
subgraph local
subgraph Frame goroutine
Q[Get next available image frame from frame channel]-->F[Look for faces using DNN]
F-->P[Check sentiment using DNN]
P-->U[Update display results stats channel]
U-->UP[Update publish results channel *OPTIONAL]
end
subgraph Main goroutine
C[Capture frames]-->MQ[Add to frame channel]
MQ-->W[Window with display including results stats]
DC[Get stats from display results channel]-->W
end
subgraph Messaging goroutine *OPTIONAL
SC[Get stats from publish results channel]-->M
M[Send MQTT messages to server with results stats]-->S
end
end

graph LR
subgraph Model creation
A[Define model architecture] -->|train|B[Trained model]
T(Training data set) -->B
end
subgraph Model usage
B --> |optimize|M[Optimized model]
M --> |inference|C[Result data]
R(Runtime data) -->C
end
